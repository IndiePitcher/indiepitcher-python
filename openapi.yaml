openapi: 3.0.3
info:
  title: IndiePitcher OpenAPI Spec
  description: |-
    ## Welcome

    IndiePitcher REST API allows you to send emails, manage your contacts, and generate portal session to manage user's contact lists.

    Please note that most destructive operations are currently not supported through the REST API for sesucurity reasons. Please use the [IndiePitcher dashboard](https://app.indiepitcher.com).

    ## Base URL
    All requests contain the following base URL:
    ```
    https://api.indiepitcher.com/v1
    ```

    ## Authentication

    - Create a free account at [IndiePitcher](https://app.indiepitcher.com) to get your API key. API keys are tied to a project.
    - After you've generated your API key you can use it to authenticate your requests by including it in the `Authorization` header.

    ```http
    Authorization: Bearer sc_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ```
    
    ## SDKs

    SDKs are available for the following languages:
    - [Node.js](https://github.com/IndiePitcher/indiepitcher-node)
    - [Swift](https://github.com/IndiePitcher/indiepitcher-swift) (server-side usage only)

    ## Rate Limits
    
    Rate limits are applied to all requests to the IndiePitcher API. The rate limits are as follows:
    - **10 requests per second across API keys tied to a project.**
    
    After reaching the rate limit, you will receive a `429 Too Many Requests` response. The rate limit will reset after 1 second. We recommend using endpoints that support batch operations to reduce the number of requests made.

    ## Quick Start Guide
    ### Send a simple email

    ```bash
    curl --request POST \
      --url https://api.indiepitcher.com/v1/email/transactional \
      --header 'Authorization: Bearer <token>' \
      --header 'Content-Type: application/json' \
      --data '{
        "to": "john@acme.com",
        "subject": "You have been invited to IndiePitcher",
        "body": "This is a sample body that supports **markdown**. Plain html is also supported.",
        "bodyFormat": "markdown"
      }'
    ```
  version: 1.2.0
  termsOfService: http://indiepitcher.com/terms
  contact:
    email: petr@indiepitcher.com
tags:
  - name: Email
  - name: Contacts
  - name: Mailing Lists
externalDocs:
  description: Find out more about IndiePitcher
  url: http://docs.indiepitcher.com
servers:
  - url: https://api.indiepitcher.com/v1
paths:
  /contacts:
    get:
      tags:
      - Contacts
      summary: Retrieve contacts
      description: Returns a paginated list of stored contacts in the mailing list.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: Page to fetch, the first page has index 1.
        - in: query
          name: per
          schema:
            type: integer
            default: 10
          required: false
          description: How many contacts to return per page.
      responses:
        '200':
          description: A paginated list of contacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  metadata:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: The current page number.
                        example: 1
                      per:
                        type: integer
                        description: The number of contacts per page.
                        example: 10
                      total:
                        type: integer
                        description: The total number of contacts.
                        example: 1023
      security:
        - apiKey: []
  
  /contacts/find:
    get:
      tags:
      - Contacts
      summary: Find a contact
      description: Find a contact based on their email address.
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
          description: The email of the contact you with to retrieve.
          example: "john@acme.com"
      responses:
        '200':
          description: A contact with matching email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Contact'
      security:
        - apiKey: []
        
  /contacts/create:
    post:
      tags:
      - Contacts
      summary: Add a new contact
      description: Add a new contact to the mailing list, or update an existing one if `updateIfExists` is set to `true`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContact'
        required: true
      responses:
        '200':
          description: A created or updated contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Contact'
      security:
        - apiKey: []
        
  /contacts/create_many:
    post:
      tags:
      - Contacts
      summary: Add multiple contacts using a single API call
      description: Add miultiple contacts (up to 100) using a single API call to avoid being rate limited. Payloads with `updateIfExists` is set to `true` will be updated if a contact with given email already exists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contacts:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateContact'
                  description: The array of contacts to add.
        required: true
      responses:
        '200':
          description: A created or updated contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      security:
        - apiKey: []
        
  /contacts/update:
    patch:
      tags:
      - Contacts
      summary: Update an existing contact
      description: Updates a contact with given email address. This call will fail if a contact with provided email does not exist, use `addContact` instead in such case.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContact'
        required: true
      responses:
        '200':
          description: Updated contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Contact'
      security:
        - apiKey: []
  
  /contacts/delete:
    post:
      tags:
      - Contacts
      summary: Delete a contact
      description: Deletes a contact with provided email from the mailing list
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  email:
                    type: string
                    example: john@acme.com
                required:
                - email
      responses:
        '200':
          description: An empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      security:
        - apiKey: []
        
  /email/transactional:
    post:
      tags:
      - Email
      summary: Sends an email to specified email address.
      description: The email is not required to belong to a contact in your contact list. Use this API to send emails such as that a user who is not signed up for your product was invited to a team.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmail'
        required: true
      responses:
        '200':
          description: An empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      security:
        - apiKey: []
        
  /email/contact:
    post:
      tags:
      - Email
      summary: Send an email to one of more registered contacts.
      description: Send a personalized email to one more (up to 100 using 1 API call) contacts subscribed to a proviced mailing list. This is the recommended way to send an email to members of a team of your product. All provided emails must belong to your mailing list and must be members of provided mailing list. All contacts are automatically subscribed to `important` default mailing list. You can use peronalization tags such as `Hi {{firstName}}` to peronalize individual sent emails, and scheduled it to be sent with a delay.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailToContact'
        required: true
      responses:
        '200':
          description: An empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      security:
        - apiKey: []
        
  /email/list:
    post:
      tags:
      - Email
      summary: Send an email to registered contacts in a mailing list.
      description: This is the recommendat way to send a newsletter, by creating a list called something like `Newsletter`. All contacts are automatically subscribed to `important` default mailing list. You can use peronalization tags such as `Hi {{firstName}}` to peronalize individual sent emails, and scheduled it to be sent with a delay.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailToMailingList'
        required: true
      responses:
        '200':
          description: An empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      security:
        - apiKey: []
        
  /lists:
    get:
      tags:
      - Mailing Lists
      summary: Retrieve mailing lists
      description: Returns paginated mailing lists contacts can subscribe to.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: Page to fetch, the first page has index 1.
        - in: query
          name: per
          schema:
            type: integer
            default: 10
          required: false
          description: How many lists to return per page.
      responses:
        '200':
          description: A paginated list of mailing lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MailingList'
                  metadata:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: The current page number.
                        example: 1
                      per:
                        type: integer
                        description: The number of contacts per page.
                        example: 10
                      total:
                        type: integer
                        description: The total number of contacts.
                        example: 20
      security:
        - apiKey: []
        
  /lists/portal_session:
    post:
      tags:
      - Mailing Lists
      summary: Create a portal session URL for a contact to manage their mailing list subscripitons
      description: Generates a new public URL for a contact with provided email to manage their mailing list subscriptions.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMailingListPortalSession'
        required: true
      responses:
        '200':
          description: The URL to redirect your user to, and the expiration date of the session.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/MailingListPortalSession'
      security:
        - apiKey: []

        
components:
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
 
  schemas:
  
    EmptyResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "Always true"
          
    CreateMailingListPortalSession:
      type: object
      properties:
        contactEmail:
          type: string
          description: The email of a contact in your project's contact list, who to create the portal session for.
          example: john@acme.com
        returnURL:
          type: string
          description: URL to redirect the user to when they tap on that they're cone editing their lists, or when the session is expired.
          example: https://example.com/projects/123456/notification_settings
      required:
        - contactEmail
        - returnURL
          
    MailingListPortalSession:
      type: object
      properties:
        url:
          type: string
          description: The URL under which the user can manage their list subscriptions.
          example: https://api.indiepitcher/lists/session/jk3434kj34j43jk3k3h433g
        expiresAt:
          type: string
          description: Until when is the session valid
          example: "2024-08-28T08:39:17.887Z"
        returnURL:
          type: string
          description: URL to redirect the user to when they tap on that they're cone editing their lists, or when the session is expired.
          example: https://example.com/projects/123456/notification_settings
          
  
    CreateContact:
      type: object
      properties:
        email:
          type: string
          description: "The email of the contact."
          example: "john@acme.com"
        userId:
          type: string
          nullable: true
          description: "The user id of the contact."
          example: "1234567"
        avatarUrl:
          type: string
          nullable: true
          description: "The avatar url of the contact."
          example: "https://example.com/avatar.jpg"
        name:
          type: string
          nullable: true
          description: "The full name of the contact."
          example: "John Doe"
        languageCode:
          type: string
          nullable: true
          description: "The language code of the contact."
          example: "en_US"
        updateIfExists:
          type: boolean
          nullable: true
          description: "If a contact with the provided email already exists, update the contact with the new data."
        ignoreListSubscriptionsWhenUpdating:
          type: boolean
          nullable: true
          description: "Whether to ignore `subscribedToLists` field if the contact already exists and `updateIfExists` is set to `true`. Useful to avoid accidentally resubscribing a contact to lists they unsubscribed before. Default value is `true`."
        subscribedToLists:
          type: array
          items:
            type: string
          description: The array of mailing lists the contact is subscribed to.
          example: ["onboarding", "newsletter"]
        customProperties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomContactPropertyValue'
          description: "The custom properties set for this contact."
          example: {"company": "Acme", "age": 35}
      required:
        - email
          
    UpdateContact:
      type: object
      properties:
        email:
          type: string
          description: "The email of the contact."
          example: "john@acme.com"
        userId:
          type: string
          nullable: true
          description: "The user id of the contact."
          example: "1234567"
        avatarUrl:
          type: string
          nullable: true
          description: "The avatar url of the contact."
          example: "https://example.com/avatar.jpg"
        name:
          type: string
          nullable: true
          description: "The full name of the contact."
          example: "John Doe"
        languageCode:
          type: string
          nullable: true
          description: "The language code of the contact."
          example: "en_US"
        addedListSubscripitons:
          type: array
          items:
            type: string
          nullable: true
          description: "The list of mailing lists to subscribe the contact to. Use the `name` field of the lists."
        removedListSubscripitons:
          type: array
          items:
            type: string
          nullable: true
          description: "The list of mailing lists to unsubscribe the contact from. Use the `name` field of the lists."
        customProperties:
          type: object
          nullable: true
          additionalProperties:
            oneOf:
              - $ref: '#/components/schemas/CustomContactPropertyValue'
          description: "The custom properties of the contact. Custom properties must be first defined in the IndiePitcher dashboard. Pass 'null' to remove a custom property."
      required:
        - email

    Contact:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: The email of the contact.
          example: john@acme.com
        userId:
          type: string
          description: The user id of the contact.
          example: 123456
        name:
          type: string
          description: The full name of the contact
          example: John Doe
        avatarUrl:
          type: string
          description: The avatar url of the contact
          example: https://example.com/profile_pictures/123456
        languageCode:
          type: string
          description: The primary language language of this contact, represented by a language code.
          example: en-US
        hardBouncedAt:
          type: string
          description: The date when an attempt to send an email to the contact failed with a hard bounce, meaning the email address is invalid and no further emails will be send to this contact. You can reset this in the dashboard to re-enable sending emails to this contact.
          example: 2024-04-23T18:25:43.511Z
        subscribedToLists:
          type: array
          items:
            type: string
          description: The array of mailing lists the contact is subscribed to.
          example: ["onboarding", "newsletter"]
        customProperties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomContactPropertyValue'
          description: "The custom properties set for this contact."
          example: {"company": "Acme", "age": 35}
          
    MailingList:
      type: object
      properties:
        name:
          type: string
          description: "The unique name of the mailing list meant to be used by the public API. Not intended to be shown to the end users, that's what `title` is for."
          example: newsletter
        title:
          type: string
          description: "A human-readable name of the mailing list."
          example: Newsletter
        numSubscribers:
          type: integer
          description: "The number of contacts subscribed to this list."
          example: 1032
      required:
        - name
        - title
        - numSubscribers
        
    EmailBodyFormat:
      type: string
      enum:
        - markdown
        - html
      description: "The format of the email body. It can be either 'markdown' or 'html'."

    CustomContactPropertyValue:
      type: object
      description: "Represents a custom contact property, which can be a string, number, boolean, or date."
      oneOf:
        - type: string
          description: "A string property."
        - type: number
          format: double
          description: "A number property."
        - type: boolean
          description: "A boolean property."
        - type: string
          format: date-time
          description: "A date property."
          
    SendEmailToContact:
      type: object
      properties:
        contactEmail:
          type: string
          nullable: true
          description: "The email of the contact to send."
          example: john@acme.com
        contactEmails:
          type: array
          items:
            type: string
          example: null
          nullable: true
          description: "Allows you to send an email to multiple contacts using a single request."
        subject:
          type: string
          description: "The subject of the email. Supports personalization."
          example: Welcome to IndiePitcher {{firstName}}!
        body:
          type: string
          description: "The body of the email. Both HTML and markdown body do support personalization."
          example: Hi {{firstName}}, You can use **markdown** to generate the email. Plain HTML is also supported.
        bodyFormat:
          $ref: '#/components/schemas/EmailBodyFormat'
        list:
          type: string
          description: "Specify a list the contact(s) can unsubscribe from if they don't wish to receive further emails like this. The contact(s) must be subscribed to this list. Pass 'important' to provide a list the contact(s) cannot unsubscribe from."
          example: important
        delaySeconds:
          type: number
          format: double
          example: null
          nullable: true
          description: "Delay sending of this email by the amount of seconds you provide."
        delayUntilDate:
          type: string
          format: date-time
          nullable: true
          description: "Delay sending of this email until specified date."
        trackEmailOpens:
          type: boolean
          description: "Whether to track email opens. Allow you to overwrite the project's global setting. Default: `nil` - Uses the project's global setting."
          example: null
        trackEmailLinkClicks:
          type: boolean
          description: "Whether to track when a users taps on a link in the email. Allow you to overwrite the project's global setting. Default: `nil` - Uses the project's global setting."
          example: null
      required:
        - subject
        - body
        - bodyFormat
        - list
        
    SendEmailToMailingList:
      type: object
      properties:
        subject:
          type: string
          description: "The subject of the email. Supports personalization."
          example: IndiePitcher monthly news for {{firstName}}
        body:
          type: string
          description: "The body of the email. Both HTML and markdown body do support personalization."
          example: Hi {{firstName}}, You can use **markdown** to generate the email. Plain HTML is also supported.
        bodyFormat:
          $ref: '#/components/schemas/EmailBodyFormat'
        list:
          type: string
          description: "Specify a list the contact(s) can unsubscribe from if they don't wish to receive further emails like this. The contact(s) must be subscribed to this list. Pass 'important' to provide a list the contact(s) cannot unsubscribe from."
          example: important
        delaySeconds:
          type: number
          format: double
          example: null
          nullable: true
          description: "Delay sending of this email by the amount of seconds you provide."
        delayUntilDate:
          type: string
          format: date-time
          nullable: true
          description: "Delay sending of this email until specified date."
        trackEmailOpens:
          type: boolean
          description: "Whether to track email opens. Allow you to overwrite the project's global setting. Default: `nil` - Uses the project's global setting."
          example: null
        trackEmailLinkClicks:
          type: boolean
          description: "Whether to track when a users taps on a link in the email. Allow you to overwrite the project's global setting. Default: `nil` - Uses the project's global setting."
          example: null
      required:
        - subject
        - body
        - bodyFormat
        - list
        
    SendEmail:
      type: object
      properties:
        to:
          type: string
          description: Can be just an email "john@example.com", or an email with a neme "John Doe <john@example.com>"
          example: john@acme.com
        subject:
          type: string
          description: "The subject of the email."
          example: You've been invited to IndiePitcher
        body:
          type: string
          description: "The body of the email. Supports markdown and HTML"
          example: You can use **markdown** to generate the email. Plain HTML is also supported.
        bodyFormat:
          $ref: '#/components/schemas/EmailBodyFormat'
        trackEmailOpens:
          type: boolean
          description: "Whether to track email opens. Allow you to overwrite the project's global setting. Default: `nil` - Uses the project's global setting."
          example: null
        trackEmailLinkClicks:
          type: boolean
          description: "Whether to track when a users taps on a link in the email. Allow you to overwrite the project's global setting. Default: `nil` - Uses the project's global setting."
          example: null
      required:
        - subject
        - body
        - bodyFormat
